*> Advent of Code 2017 Day 3 Challenge 2
*> BRUTE FORCE
IDENTIFICATION DIVISION.
PROGRAM-ID. DAY3_2.

DATA DIVISION.
    WORKING-STORAGE SECTION.
        *> Square spiral of sums table variables
        01 WS-ROW               PIC 9(2) VALUE 6.
        01 WS-ALT-ROW           PIC 9(2).
        01 WS-COL               PIC 9(2) VALUE 6.
        01 WS-ALT-COL           PIC 9(2).
        01 WS-SQUARE-TABLE.
            05 WS-SQUARE-TABLE-ROW OCCURS 11.
                10 WS-SQUARE OCCURS 11 TIMES PIC 9(38).

        *> Spiral variables
        01 WS-DIRECTION         PIC A VALUE 'R'.
            88 WS-DIR-UP        VALUE 'U'.
            88 WS-DIR-DOWN      VALUE 'D'.
            88 WS-DIR-LEFT      VALUE 'L'.
            88 WS-DIR-RIGHT     VALUE 'R'.
        01 WS-MAX-NUM-MOVES     PIC 9(2) VALUE 1.
        01 WS-TIMES-MOVED       PIC 9(2) VALUE 0.
        01 WS-ROUNDS-LEFT       PIC 9(2) VALUE 2.
        01 WS-ADJ-SUM           PIC 9(38) VALUE 0.

        *> Misc. variables
        01 WS-ANS-FOUND         PIC A VALUE 'N'.

PROCEDURE DIVISION.
100-MAIN.
    PERFORM 200-SPIRAL THRU 200-SPIRAL-EXIT
    DISPLAY WS-ADJ-SUM
    STOP RUN.

200-SPIRAL.
    *> Fill in first square
    SET WS-SQUARE(WS-COL, WS-ROW) TO 1
    PERFORM U900-MOVE THRU U900-EXIT

    *> Fill in rest of square
    PERFORM UNTIL WS-ANS-FOUND = 'Y'
        PERFORM U900-CALC-VALUE THRU U900-CALC-VALUE-EXIT
        SET WS-SQUARE(WS-COL, WS-ROW) TO WS-ADJ-SUM
        PERFORM U900-MOVE THRU U900-EXIT
        IF WS-ADJ-SUM > 277678
            MOVE 'Y' TO WS-ANS-FOUND
        ELSE
            SET WS-ADJ-SUM TO 0
        END-IF
    END-PERFORM.

200-SPIRAL-EXIT.
    EXIT.

U900-CALC-VALUE.
    *> Left Value
    SUBTRACT 1 FROM WS-COL GIVING WS-ALT-COL
    ADD WS-SQUARE(WS-ALT-COL, WS-ROW) TO WS-ADJ-SUM

    *> Right Value
    ADD 1 TO WS-COL GIVING WS-ALT-COL
    ADD WS-SQUARE(WS-ALT-COL, WS-ROW) TO WS-ADJ-SUM

    *> Bottom Value
    SUBTRACT 1 FROM WS-ROW GIVING WS-ALT-ROW
    ADD WS-SQUARE(WS-COL, WS-ALT-ROW) TO WS-ADJ-SUM

    *> Top Value
    ADD 1 TO WS-ROW GIVING WS-ALT-ROW
    ADD WS-SQUARE(WS-COL, WS-ALT-ROW) TO WS-ADJ-SUM

    *> Top Left Value
    SUBTRACT 1 FROM WS-COL GIVING WS-ALT-COL
    ADD 1 TO WS-ROW GIVING WS-ALT-ROW
    ADD WS-SQUARE(WS-ALT-COL, WS-ALT-ROW) TO WS-ADJ-SUM

    *> Top Right Value
    ADD 1 TO WS-COL GIVING WS-ALT-COL
    ADD 1 TO WS-ROW GIVING WS-ALT-ROW
    ADD WS-SQUARE(WS-ALT-COL, WS-ALT-ROW) TO WS-ADJ-SUM
    
    *> Bottom Left Value
    SUBTRACT 1 FROM WS-COL GIVING WS-ALT-COL
    SUBTRACT 1 FROM WS-ROW GIVING WS-ALT-ROW
    ADD WS-SQUARE(WS-ALT-COL, WS-ALT-ROW) TO WS-ADJ-SUM

    *> Bottom Right Value
    ADD 1 TO WS-COL GIVING WS-ALT-COL
    SUBTRACT 1 FROM WS-ROW GIVING WS-ALT-ROW
    ADD WS-SQUARE(WS-ALT-COL, WS-ALT-ROW) TO WS-ADJ-SUM.

U900-CALC-VALUE-EXIT.
    EXIT.

U900-MOVE.
    *> Update current square
    EVALUATE TRUE
        WHEN WS-DIR-UP
            ADD 1 TO WS-ROW
        WHEN WS-DIR-DOWN
            SUBTRACT 1 FROM WS-ROW
        WHEN WS-DIR-LEFT
            SUBTRACT 1 FROM WS-COL
        WHEN WS-DIR-RIGHT
            ADD 1 TO WS-COL
    END-EVALUATE

    *> Update direction
    ADD 1 TO WS-TIMES-MOVED
    IF WS-TIMES-MOVED = WS-MAX-NUM-MOVES
        SET WS-TIMES-MOVED TO 0
        SUBTRACT 1 FROM WS-ROUNDS-LEFT
        PERFORM U900-CHANGE-DIRECTION THRU U900-CHANGE-DIRECTION-EXIT
    END-IF

    *> Update max distance can travel
    IF WS-ROUNDS-LEFT = 0
        ADD 1 TO WS-MAX-NUM-MOVES
        SET WS-ROUNDS-LEFT TO 2
    END-IF.


U900-EXIT.
    EXIT.

U900-CHANGE-DIRECTION.
    EVALUATE TRUE
        WHEN WS-DIR-UP
            SET WS-DIR-LEFT TO TRUE
        WHEN WS-DIR-DOWN
            SET WS-DIR-RIGHT TO TRUE
        WHEN WS-DIR-LEFT
            SET WS-DIR-DOWN TO TRUE
        WHEN WS-DIR-RIGHT
            SET WS-DIR-UP TO TRUE
    END-EVALUATE.

U900-CHANGE-DIRECTION-EXIT.
    EXIT.
